package libraries;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.MalformedURLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

import org.openqa.selenium.support.ui.Select;
import org.apache.bcel.Repository;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.ss.formula.functions.Days360;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.Alert;
//import org.apache.bcel.generic.Select;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotVisibleException;
import org.openqa.selenium.JavascriptException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.NoSuchWindowException;
import org.openqa.selenium.Point;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.Mouse;
import org.openqa.selenium.internal.Locatable;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.FindFailed;
import org.sikuli.script.ImagePath;
import org.sikuli.script.Key;
import org.sikuli.script.Screen;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.Test;
import org.testng.util.Strings;
import tests.Test1;

import com.gargoylesoftware.htmlunit.ElementNotFoundException;
import com.itextpdf.text.log.SysoCounter;
import com.relevantcodes.extentreports.ExtentReports;

import tests.Test1;
import tests.Test2;
import tests.Test3;
import tests.Test4;
import tests.Test5;
import libraries.Project;
import libraries.Constants;
import net.bytebuddy.asm.Advice.Enter;
import net.sourceforge.htmlunit.corejs.javascript.JavaScriptException;
import java.time.Duration;

@SuppressWarnings("unused")
public class BusinessRules {
	static CommonLib common = new CommonLib();
	Constants constants = new Constants();
	//Project project=new Project();
	static ReadExcel excel = new ReadExcel();
	Data_Interaction data_Interaction = new Data_Interaction();
	public static ObjectRepository repository = new ObjectRepository();
	public static String strTextFromHeader;
	public static String strApplicationStatus;
	public static ExtentReports report;

	public void SelectBR(RemoteWebDriver driver, String strConfig, String BusinessRule, String Value) {
		switch (BusinessRule) {
		case "BR_verifyElementsDisplayed":
	//		homePageElementsVerify(driver, strConfig);
		case "BR_calculatorverfiy":
			//calculator(driver, strConfig);


		default:
			CommonLib.getLogger(strConfig).info(BusinessRule + " is not yet implemented.");
		}
	}

	public void setStopTestCaseValue(RemoteWebDriver driver, String strConfig, String value){
		if(value.equalsIgnoreCase("Yes")){
			switch(strConfig){
			case "Config1":
				Test1.blnStopCurrentTestCase = true;
				break;
			case "Config2":
				Test2.blnStopCurrentTestCase = true;
				break;
			case "Config3":
				Test3.blnStopCurrentTestCase = true;
				break;
			case "Config4":
				Test4.blnStopCurrentTestCase = true;
				break;
			case "Config5":
				Test5.blnStopCurrentTestCase = true;
				break;
			default:
				Test1.blnStopCurrentTestCase = true;
			}
		}
	}
	
	public static void loginRiskTracker(RemoteWebDriver driver, String strConfig, String strUserName,
			String strPassword) {

		Project.ExecuteRow(driver, strConfig, "BTN_Login_IntegroAccount", "Click");

		Project.ExecuteRow(driver, strConfig, "TXT_Login_IntegroUsername", strUserName);

		Project.ExecuteRow(driver, strConfig, "BTN_Login_IntegroNext", "Click");

		Project.ExecuteRow(driver, strConfig, "TXT_Login_IntegroPassword", CommonLib.DecryptPassword(strPassword));

		Project.ExecuteRow(driver, strConfig, "BTN_SignIn", "Click");

		Boolean isStaySignedInPagePresent = ObjectRepository.GetObjects(driver, strConfig, "LBL_Stay_SignedIn").size() > 0;

		if (isStaySignedInPagePresent) {
			Project.ExecuteRow(driver, strConfig, "BTN_Stay_SignedIn_NO", "Click");
		}
		CommonLib.waitForLoad(driver, strConfig);

	}
	
	public static void verifyHomePageDefaultElements(RemoteWebDriver driver, String strConfig) {

		//Wait for 3 links to be Clickable: User Support, Settings and Log Out to be clickable
		CommonLib.waitForLoad(driver, strConfig);
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_UserSupport");
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_Settings");
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_Logout_IntegroAccount");

	}
	
	public static void verifyAccountHandlerHomePage(RemoteWebDriver driver, String strConfig) {
		
	}

	public static void verifyAdministratorHomePage(RemoteWebDriver driver, String strConfig) {
		try {
		CommonLib.waitForLoad(driver, strConfig);
		WebDriverWait wait = new WebDriverWait(driver, 20);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("//*[contains(@id,'Title')]/h1[text()='Admin Dashboard']")));
		}
		
		catch (NoSuchElementException e) {
			TestReporter.Error(driver, strConfig, "Exception Thrown",
					"NoSuchElementException on- WaitForElement: Title Admin Dashboard ");
		} catch (StaleElementReferenceException e) {
			TestReporter.Error(driver, strConfig, "Exception Thrown",
					"StaleElementReferenceException on- WaitForElement: Title Admin Dashboard ");
		} catch (JavascriptException e) {
			TestReporter.Error(driver, strConfig, "Exception Thrown",
					"JavascriptException on- WaitForElement: Title Admin Dashboard ");
		} catch (TimeoutException e) {
			TestReporter.Warning(driver, strConfig, "Exception Thrown",
					"TimeoutException on- WaitForElement: Title Admin Dashboard ");
		} catch (NullPointerException e) {
			TestReporter.Error(driver, strConfig, "Exception Thrown",
					"NullPointerException on- WaitForElement: Title Admin Dashboard ");
		} catch (IllegalArgumentException e) {
			TestReporter.Error(driver, strConfig, "Exception Thrown",
					"IllegalArgumentException on- WaitForElement: Title Admin Dashboard ");
		}

	}

	public static void verifySeniorInsuranceTechHomePage(RemoteWebDriver driver, String strConfig) {



	}

	public static void verifyOperationsTeamLeadHomePage(RemoteWebDriver driver, String strConfig) {



	}

	public static void verifyAsOperationsTechHomePage(RemoteWebDriver driver, String strConfig) {



	}

	public static void verifyAdministrationsTeamHomePage(RemoteWebDriver driver, String strConfig) {



	}
	
	public static void verifyRiskOverviewTabDefaultPopulatedFields(RemoteWebDriver driver, String strConfig) {
		
	}
	
	public static void verifyRiskOverviewTabMandatoryFields(RemoteWebDriver driver, String strConfig) {
		
	}
	
	
	public static String createNewRisk(RemoteWebDriver driver, String strConfig) {
		String riskTrackerRefNum = null;
		
		CommonLib.getLogger(strConfig).info("Inside createNewRisk");
		
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskOverview");

		LinkedHashMap<String, String> riskOverviewTabData = RTData.getRiskOverviewData();
		
		
		// NEW/RENEWALCLASSIFICATION gadbad
		// ---- Select New/Renewal Classification Option from the Dropdown
		if ((riskOverviewTabData.get(Constants.RiskOverviewFields.get(0)) != null)) {
			Project.ExecuteRow(driver, strConfig, "CBO_RiskOverview_NewOrRenewal_Classification",
					riskOverviewTabData.get(Constants.RiskOverviewFields.get(0)));
		}
		// DEPARTMENT
		// ---- Select Department Option from the Dropdown
		Project.ExecuteRow(driver, strConfig, "DDO_RiskOverview_Department", "Click");
		CommonLib.smallDelay();
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskOverview_Department");
		
		Project.ExecuteRow(driver, strConfig, "DTI_RiskOverview_Department",
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(1)));

		// AGENT/CLIENT
		// ---- Enter Agent/Client Name in the Text Input Field [DATA FROM EXCEL]
		Project.ExecuteRow(driver, strConfig, "TXT_RiskOverview_AgentOrClient",
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(2)));
		CommonLib.smallDelay();

		// ---- Wait for the Agent/Client Name and Account No Combination Options to
		// display [DATA FROM EXCEL]
		CommonLib.WaitForElementToBeClickable(driver, strConfig, String.format(
				Constants.agentOrClient_SearchText_Output_XPATH,
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(2)),
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(3))));

		// ---- Click on the desired option for Agent/Client Name and Account No
		// Combination [DATA FROM EXCEL]
		WebElement agentOrClient_SearchTxt_Output = driver.findElement(By.xpath(String.format(
				Constants.agentOrClient_SearchText_Output_XPATH,
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(2)),
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(3)))));
		
		common.JSClick(driver, strConfig, agentOrClient_SearchTxt_Output);
		
		
		// DIRECT INSURED PLACEMENT OR REINSURANCE
		if ( ((riskOverviewTabData.get(Constants.RiskOverviewFields.get(5)) == null)
				|| (riskOverviewTabData.get(Constants.RiskOverviewFields.get(5)).trim().contentEquals("No"))) && 
				((riskOverviewTabData.get(Constants.RiskOverviewFields.get(7)) == null)
				|| (riskOverviewTabData.get(Constants.RiskOverviewFields.get(7)).trim().contentEquals("No"))) ) {
			
			if(!(riskOverviewTabData.get(Constants.RiskOverviewFields.get(4)) == null)) {
			Project.ExecuteRow(driver, strConfig, "TXT_RiskOverview_Insured_Or_DirectInsured_Or_OriginalInsured",
					riskOverviewTabData.get(Constants.RiskOverviewFields.get(4)));
			}
		}
		
		else if ((riskOverviewTabData.get(Constants.RiskOverviewFields.get(5)) != null)
				|| (riskOverviewTabData.get(Constants.RiskOverviewFields.get(5)).trim().contentEquals("Yes"))) {
			
			Project.ExecuteRow(driver, strConfig, "CHK_RiskOverview_DirectInsured_Placement_ONOFF_Switch", "Click");
			
			//This Logic needs to be clarified from BA or Dev
			// Since this is already populated when Direct Insured is Switched ON and the value cannot be verified with Agent/Client entered previously
			if (!(riskOverviewTabData.get(Constants.RiskOverviewFields.get(6)) == null)) {
				Project.ExecuteRow(driver, strConfig, "TXT_RiskOverview_Insured_Or_DirectInsured_Or_OriginalInsured",
						riskOverviewTabData.get(Constants.RiskOverviewFields.get(6)));
			}
		}

		else if ((riskOverviewTabData.get(Constants.RiskOverviewFields.get(7)) != null)
				|| (riskOverviewTabData.get(Constants.RiskOverviewFields.get(7)).trim().contentEquals("Yes"))) {

			Project.ExecuteRow(driver, strConfig, "CHK_RiskOverview_Reinsurance_ONOFF_Switch", "Click");
			//This Logic needs to be clarified from BA or Dev
			if(!(riskOverviewTabData.get(Constants.RiskOverviewFields.get(8)) == null)) {
			Project.ExecuteRow(driver, strConfig, "TXT_RiskOverview_Insured_Or_DirectInsured_Or_OriginalInsured",
					riskOverviewTabData.get(Constants.RiskOverviewFields.get(8)));
			}
			
			//This Logic needs to be clarified from BA or Dev
			if(!(riskOverviewTabData.get(Constants.RiskOverviewFields.get(9)) == null)) {
			Project.ExecuteRow(driver, strConfig, "TXT_RiskOverview_Reinsured",
					riskOverviewTabData.get(Constants.RiskOverviewFields.get(9)));
			}

		}
		
		
		// ACCOUNT EXECUTIVE
		// ---- Select Account Executive Option from the Dropdown
		Project.ExecuteRow(driver, strConfig, "DDO_RiskOverview_AccountExecutive", "Click");
		CommonLib.smallDelay();
		 CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskOverview_AccountExecutive");
		// ---- Select Account Executive Option from the Dropdown [DATA FROM EXCEL]
		Project.ExecuteRow(driver, strConfig, "DTI_RiskOverview_AccountExecutive",
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(10)));

		// INTERNAL BROKER
		// ---- Select Internal Broker Option from the Dropdown
		Project.ExecuteRow(driver, strConfig, "DDO_RiskOverview_InternalBroker", "Click");
		CommonLib.smallDelay();
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskOverview_InternalBroker");
		// ---- Select Account Executive Option from the Dropdown [DATA FROM EXCEL]
		Project.ExecuteRow(driver, strConfig, "DTI_RiskOverview_InternalBroker",
				riskOverviewTabData.get(Constants.RiskOverviewFields.get(11)));

		// SAVE BUTTON
		Project.ExecuteRow(driver, strConfig, "BTN_Save", "Click");
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Save");
		CommonLib.waitForLoad(driver, strConfig);
		
		// RISK TRACKER REF NUMBER
		riskTrackerRefNum = RTData.getRiskTracker_RefNo(driver, strConfig, Constants.riskTrackerRefNo_XPATH);
		
		return riskTrackerRefNum;
					
				}
	
	
		public static void verify_RiskOverview_TabAfter_RiskGeneration(RemoteWebDriver driver,String strConfig) {

			CommonLib.waitForLoad(driver, strConfig);
			
			// RISK DETAILS TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskDetails");

			// INSTRUCTIONS SHEET TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_InstructionsSheet");
		
			// UMR Check Field is empty and Disabled
			WebElement UMRTxtEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_UMR");
			System.out.println("UMRTxtEle.isEnabled()" + UMRTxtEle.isEnabled());
			if (UMRTxtEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: UMR Text Input Field is enabled after Risk Creation");
				TestReporter.Fail(driver, strConfig, "UMR Text Input Field",
						"Enabled on Risk Overview tab after Risk Creation");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: UMR Text Input Field is disabled after Risk Creation");
				TestReporter.Pass(driver, strConfig, "UMR Text Input Field",
						"disabled on Risk Overview tab after Risk Creation");
			}
		
			System.out.println(
					"UMRTxtEle.getText() != null && !UMRTxtEle.getText().trim().isEmpty()" + UMRTxtEle.getText() != null
							&& !UMRTxtEle.getText().trim().isEmpty());
			if (UMRTxtEle.getText() != null && !UMRTxtEle.getText().trim().isEmpty()) {
				CommonLib.getLogger(strConfig).info(
						"FAIL: UMR Text Input Field is not empty/UMR is populated in UMR Text Input Field after Risk Generation");
				TestReporter.Fail(driver, strConfig, "UMR Text Input Field",
						"Not empty/Has value after Risk Generation");
			} else {
				CommonLib.getLogger(strConfig).info(
						"PASS: UMR Text Input Field is empty/UMR is not populated in UMR Text Input Field after Risk Generation");
				TestReporter.Pass(driver, strConfig, "UMR Text Input Field", "Empty after Risk Generation");

			}
			// Check the presence of below elements after a new Risk is generated

			// RISK TRACKER REF LABEL
			WebElement riskRefNo = driver.findElement(By.xpath(Constants.riskTrackerRefNo_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, riskRefNo);

			// AGENT/CLIENT TEXT FIELD INPUT
			WebElement agentOrClientTxtEle = repository.GetObject(driver, strConfig, "TXT_AgentOrClient_Disabled");
			System.out.println("agentOrClientTxtEle.isEnabled()" + agentOrClientTxtEle.isEnabled());
			if (agentOrClientTxtEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Agent or Client Field is enabled after Risk Generation");
				TestReporter.Fail(driver, strConfig, "Agent/Client Field",
						"Enabled on Risk Overview tab after Risk Creation");
			} else {
				CommonLib.getLogger(strConfig)
						.info("PASS: Agent or Client Field disabled on Risk Overview Tab after Risk Creation");
				TestReporter.Pass(driver, strConfig, "Agent or Client Field",
						"Is disabled on Risk Overview Tab after Risk Creation");

			}

			// ------------------Verify Action buttons---------------------------

			// NTU Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_NTU");

			// DMS DOCUMENTS Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Dms_Documents");

			// FIRM ORDER Button is visible but disabled
			WebElement btnFirmOrder = repository.GetObject(driver, strConfig, "BTN_Actions_FirmOrder");
			CommonLib.waitForElementVisibility(driver, strConfig, btnFirmOrder);
			if (btnFirmOrder.isEnabled()) {
				CommonLib.getLogger(strConfig)
						.info("FAIL: Firm Order Button enabled on Risk Overview Tab immediately after Risk Creation");
				TestReporter.Fail(driver, strConfig, "Firm Order button",
						"Enabled immediately on Risk Overview Tab after Risk Creation");
			} else {
				CommonLib.getLogger(strConfig)
						.info("PASS: Firm Order Button disabled on Risk Overview Tab after Risk Creation");
				TestReporter.Pass(driver, strConfig, "Firm Order button",
						"Is visible and disabled on Risk Overview Tab after Risk Creation");

			}

			// SUBMIT TO BROKER OPS Button is visible but disabled
			WebElement btnSubmitToBrokerOps = repository.GetObject(driver, strConfig, "BTN_Actions_SubmitTo_BrokerOps");
			CommonLib.waitForElementVisibility(driver, strConfig, btnSubmitToBrokerOps);
			if (btnSubmitToBrokerOps.isEnabled()) {
				CommonLib.getLogger(strConfig).info(
						"FAIL: Submit to Broker Ops Button enabled on Risk Overview Tab immediately after Risk Creation");
				TestReporter.Fail(driver, strConfig, "Submit to Broker Ops button enabled",
						"Enabled on Risk Overview Tab after Risk Creation");
			}

			else {
				CommonLib.getLogger(strConfig).info(
						"PASS: Submit to Admin Button disabled on Risk Overview Tab immediately after Risk Creation");
				TestReporter.Pass(driver, strConfig, "Submit to Admin button",
						"Is visible and disabled on Risk Overview Tab after Risk Creation");

			}

			// ------------------Verify Stage Checked and Unchecked & Date Populated if
			// Checked-------------------
			WebElement createdChecked = driver
					.findElement(By.xpath(Constants.riskOverview_Created_StageIcon_Checked_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, createdChecked);

			WebElement NBIUnchecked = driver
					.findElement(By.xpath(Constants.riskOverview_NBI_StageIcon_UnChecked_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, NBIUnchecked);

			WebElement QuoteUnchecked = driver
					.findElement(By.xpath(Constants.riskOverview_Quote_StageIcon_UnChecked_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, QuoteUnchecked);

			WebElement FirmOrder_Unchecked = driver
					.findElement(By.xpath(Constants.riskOverview_FirmOrder_StageIcon_UnChecked_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, FirmOrder_Unchecked);

			WebElement SubmittedTo_Admin_Unchecked = driver
					.findElement(By.xpath(Constants.riskOverview_SubmittedTo_BrokerOps_StageIcon_UnChecked_XPATH));
			CommonLib.waitForElementVisibility(driver, strConfig, SubmittedTo_Admin_Unchecked);

			// ---------------Verify Date Populated against Created Date Field------------
			WebElement riskCreatedDateEle = driver
					.findElement(By.xpath(Constants.riskOverview_Created_Stage_CurrentDate_Populated_XPATH));
			String riskCreatedDate = riskCreatedDateEle.getText();

			if (riskCreatedDate.trim().contentEquals(RTData.getCurrentStageDate())) {
				CommonLib.getLogger(strConfig)
						.info("PASS: Created Date visible upon Risk Creation in Risk Overview Tab");
				TestReporter.Pass(driver, strConfig, "Created Date: ",
						"Date visible upon Risk Creation in Risk Overview Tab");
			}

			else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: Created Date not visible upon Risk Creation in Risk Overview Tab");
				TestReporter.Fail(driver, strConfig, "Created Date: ",
						"Date not visible upon Risk Creation in Risk Overview Tab");

			}
	}
		
		
		
		public static void saveRiskDetailsTab(RemoteWebDriver driver, String strConfig, ArrayList<String> riskDetailsData) {
			String riskTrackerRefNum = null;
			
			//Wait for Department Dropdown to become clickable as the Loading Spinner hides this field
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_Department");

			CommonLib.getLogger(strConfig).info("Inside saveRiskDetailsTab");
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskDetails");

			LinkedHashMap<String, String> riskDetailsTabData = RTData.getRiskDetailsData();

			// Click on the Risk Details Menu Item
			WebElement menuItemRiskDetailsEle = repository.GetObject(driver, strConfig, "LN_MenuItem_RiskDetails");
			common.JSClick(driver, strConfig, menuItemRiskDetailsEle);
			//Project.ExecuteRow(driver, strConfig, "LN_MenuItem_RiskDetails", "Click");
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.waitForElementVisibility(driver, strConfig, repository.GetObject(driver, strConfig, "BTN_NBI"));

			// This field is for release 2.1 and will be removed in release 2.2
			Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_PolicyType", "Test Policy");

			
			/*-------Major and Minor Class of Business will be going in Release 2.2----*/	
			/*-------COMMENTING TEMPORARILY----*/
			
			/*
			// MAJOR CLASS OF BUSINESS
			// ---- Select Major Class of Business Option from the Dropdown [DATA FROM EXCEL]
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_MajorClass_OfBusiness");

			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(0)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(2)).trim().isEmpty())
					&& riskDetailsTabData.get(Constants.RiskDetailsFields.get(0)).trim().contentEquals("Yes")) {

				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MajorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness");

				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness",
						Constants.MajorClassOfBusiness.get(0));
				
				// MINOR CLASS OF BUSINESS
				// ---- Select Minor Class of Business Option from the Dropdown [DATA FROM EXCEL]
				CommonLib.waitForLoad(driver, strConfig);
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness");
				
				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness");

				if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(3))!= null
						&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(3)).trim().isEmpty())){
				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(3)));
				}
				else {
					CommonLib.getLogger(strConfig)
					.info("FAIL: Minor Class not selected for Major Class Aviation in RTTestData.xlsx file");
			TestReporter.Fail(driver, strConfig, "Minor Class for Major Class Aviation ",
					"Not Selected in RTTestData.xlsx file");
				}

			}

			else if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(1)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(1)).trim().isEmpty())
					&& riskDetailsTabData.get(Constants.RiskDetailsFields.get(1)).trim().contentEquals("Yes")) {

				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MajorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness");

				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness",
						Constants.MajorClassOfBusiness.get(1));
				
				// MINOR CLASS OF BUSINESS
				// ---- Select Minor Class of Business Option from the Dropdown [DATA FROM EXCEL]
				CommonLib.waitForLoad(driver, strConfig);
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness");
				
				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness");

				if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(4)) != null 
						&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(4)).trim().isEmpty())){
				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(4)));
				}
				else {
					CommonLib.getLogger(strConfig)
					.info("FAIL: Minor Class not selected for Major Class Marine in RTTestData.xlsx file");
			TestReporter.Fail(driver, strConfig, "Minor Class for Major Class Marine ",
					"Not Selected in RTTestData.xlsx file");
				}

			}

			else if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(2)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(2)).trim().isEmpty())
					&& riskDetailsTabData.get(Constants.RiskDetailsFields.get(2)).trim().contentEquals("Yes")) {

				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MajorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness");

				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MajorClass_OfBusiness",
						Constants.MajorClassOfBusiness.get(2));
				
				// MINOR CLASS OF BUSINESS
				// ---- Select Minor Class of Business Option from the Dropdown [DATA FROM EXCEL]
				CommonLib.waitForLoad(driver, strConfig);
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness");
				
				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_MinorClass_OfBusiness", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness");

				if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(5)) != null
						&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(5)).trim().isEmpty())){
				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_MinorClass_OfBusiness",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(5)));
				}
				else {
					CommonLib.getLogger(strConfig)
					.info("FAIL: Minor Class not selected for Major Class Non Marine in RTTestData.xlsx file");
			TestReporter.Fail(driver, strConfig, "Minor Class for Major Class Non Marine ",
					"Not Selected in RTTestData.xlsx file");
				}

			}
			*/
			
			
			// PREMIUM CURRENCY CODE - running fine
			// ---- Select Premium Currency Code Option from the Dropdown [DATA FROM EXCEL]
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_PremiumCurrency_Code");
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(6)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(6)).trim().isEmpty())) {
				CommonLib.smallDelay();
				Project.ExecuteRow(driver, strConfig, "DDO_RiskDetails_PremiumCurrency_Code", "Click");
				CommonLib.smallDelay();
				CommonLib.WaitForElementToBeClickable(driver, strConfig, "DTI_RiskDetails_PremiumCurrency_Code");
				CommonLib.smallDelay();
				System.out.println(
						"Premium Currency Code : " + riskDetailsTabData.get(Constants.RiskDetailsFields.get(6)));
				Project.ExecuteRow(driver, strConfig, "DTI_RiskDetails_PremiumCurrency_Code",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(6)));
				CommonLib.smallDelay();

			} else {
				CommonLib.getLogger(strConfig).info("INFO: Premium Currency Code not selected in RTTestData.xlsx file. "
						+ "Hence default value 'UNITED STATES DOLLAR (USD)' retained");
				TestReporter.Fail(driver, strConfig, "Premium Currency Code : ", "Not Selected in RTTestData.xlsx file."
						+ " Hence default value 'UNITED STATES DOLLAR (USD)' retained");
			}
			
			// LIMIT
			// ---- Enter Limit in the Text Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(7)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(7)).trim().isEmpty())) {
				System.out.println("Limit" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(7)));

				Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_Limit",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(7)));
			}

			// DEDUCTIBLE
			// ---- Enter Deductible in the Text Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(9)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(9)).trim().isEmpty())) {
				System.out.println("Deductible" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(9)));

				Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_Deductible",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(9)));
			}

			// PREMIUM
			// ---- Enter Premium in the Text Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(8)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(8)).trim().isEmpty())) {
				System.out.println("Premium" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(8)));

				Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_Premium",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(8)));
			}
			
			
			// CLIENT COMMISSION
			// ---- Enter Client Commission in the Text Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(10)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(10)).trim().isEmpty())) {

				if (Integer.parseInt(riskDetailsTabData.get(Constants.RiskDetailsFields.get(10))) >= 10
						&& Integer.parseInt(riskDetailsTabData.get(Constants.RiskDetailsFields.get(10))) <= 35) {
					System.out
							.println("Client Commission" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(10)));

					Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_ClientCommission",
							riskDetailsTabData.get(Constants.RiskDetailsFields.get(10)));

				} else {
					CommonLib.getLogger(strConfig).info(
							"FAIL: Client Commission must be between 10% and 35% and supplied value in RTTestData.xlsx file does not lie in this range");
					TestReporter.Fail(driver, strConfig, "Client Commission: ",
							"Must be between 10% and 35% and supplied value in RTTestData.xlsx file does not lie in this range");
				}
			}
			
			
			
			// INFORMATION
			// ---- Enter Information in the TextArea Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(11)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(11)).trim().isEmpty())) {
				System.out.println("Info" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(11)));
				Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_Information",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(11)));
			}

			// TERMS
			// ---- Enter Terms in the TextArea Input Field [DATA FROM EXCEL]
			if (riskDetailsTabData.get(Constants.RiskDetailsFields.get(12)) != null
					&& !(riskDetailsTabData.get(Constants.RiskDetailsFields.get(12)).trim().isEmpty())) {
				System.out.println("Terms" + riskDetailsTabData.get(Constants.RiskDetailsFields.get(12)));
				Project.ExecuteRow(driver, strConfig, "TXT_RiskDetails_Terms",
						riskDetailsTabData.get(Constants.RiskDetailsFields.get(12)));
			}

			// SAVE BUTTON
			Project.ExecuteRow(driver, strConfig, "BTN_Save", "Click");
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Save");
			

		}
		public static void verifyRiskDetailsTabAfterSave(RemoteWebDriver driver, String strConfig) {
			CommonLib.waitForLoad(driver, strConfig);
			
			// Button Button is clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_NBI");
						
			// NTU Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_NTU");

			// DMS DOCUMENTS Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Dms_Documents");
			
			// Firm Order Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_FirmOrder");

			// Notes Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Notes");
			
			// Copy Button is visible and clickable
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Copy");
			
		}
	
		public static void verifyRiskDetailsDefaultPopulatedFields(RemoteWebDriver driver, String strConfig) {
			
		}
		
		public static void verifyRiskDetailsMandatoryFields(RemoteWebDriver driver, String strConfig) {
			
		}
		
		public static void searchRisk(RemoteWebDriver driver, String strConfig, String strRiskRef,
				Boolean openRiskCard) {
			CommonLib.getLogger(strConfig).info("Inside searchRisk_DefaultView");

			CommonLib.WaitForElementToBeClickable(driver, strConfig, "TXT_RiskDashboard_SearchRisk");
			Project.ExecuteRow(driver, strConfig, "TXT_RiskDashboard_SearchRisk", strRiskRef);

			CommonLib.waitForLoad(driver, strConfig);

			String[] locatorDetails = CommonLib.getLocatorDetails_From_ObjectRepository(driver, strConfig,
					"LN_RiskDashboard_RiskCard_RiskRef");

			//WebElement RiskCardEle = driver
					//.findElement(By.xpath(String.format(locatorDetails[1], strRiskRef, strRiskRef)));
			
			//Boolean riskFound = CommonLib.isElementDisplayed( driver,  strConfig, RiskCardEle);
			
			Boolean riskFound = common.isElementVisible(driver,  strConfig,String.format(locatorDetails[1], strRiskRef, strRiskRef));
			System.out.println("Risk"+strRiskRef+" Found : "+riskFound);
			if (riskFound) {
				CommonLib.getLogger(strConfig).info("PASS: Risk present in Risk Tracker Dashboard");
				TestReporter.Pass(driver, strConfig, "Risk on Dashboard", "Risk present in Risk Tracker Dashboard");
				CommonLib.WaitForElementToBeClickable(driver, strConfig, String.format(locatorDetails[1], strRiskRef, strRiskRef));

				if (openRiskCard.equals(true)) {
					WebElement riskCard_RiskRefEle = driver
							.findElement(By.xpath(String.format(locatorDetails[1], strRiskRef, strRiskRef)));

					common.JSClick(driver, strConfig, riskCard_RiskRefEle);
					CommonLib.waitForLoad(driver, strConfig);
				}
			} else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: Risk not present in Risk Tracker Dashboard");
				TestReporter.Fail(driver, strConfig, "Risk on Dashboard", "Risk Not present in Risk Tracker Dashboard");

			}

		}
		
		public static void NTURisk(RemoteWebDriver driver, String strConfig, ArrayList<String> NTUData) {

			CommonLib.waitForLoad(driver, strConfig);

			String riskTrackerRefNum = RTData.getRiskTracker_RefNo(driver, strConfig, Constants.riskTrackerRefNo_XPATH);
			System.out.println("riskTrackerRefNum" + riskTrackerRefNum);
			WebElement NTUBtnEle = repository.GetObject(driver, strConfig, "BTN_Actions_NTU");
			System.out.println("NTU Button Enabled()?" + NTUBtnEle.isEnabled());
			
			if (NTUBtnEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("INFO: NTU button is enabled. Proceeding with NTU of Risk");

				if (NTUData.get(0).trim().contentEquals(riskTrackerRefNum)) {
					// Wait for NTU Button is visible and clickable
					CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_NTU");

					Project.ExecuteRow(driver, strConfig, "BTN_Actions_NTU", "Click");

					// Wait for the NTU Pop Up window to show up
					CommonLib.WaitForElementToBeClickable(driver, strConfig, Constants.NTUPopUp);

					// Select the NTU Reason from Dropdown

					Project.ExecuteRow(driver, strConfig, "DDO_NTU_Reason", "Click");
					CommonLib.smallDelay();
					String[] NTUReasonOptionlocatorDetails = CommonLib.getLocatorDetails_From_ObjectRepository(driver,
							strConfig, "DDO_NTU_ReasonOption");

					CommonLib.WaitForElementToBeClickable(driver, strConfig,
							String.format(NTUReasonOptionlocatorDetails[1], NTUData.get(1)));

					WebElement NTUReasonOptionEle = driver
							.findElement(By.xpath(String.format(NTUReasonOptionlocatorDetails[1], NTUData.get(1))));

					common.JSClick(driver, strConfig, NTUReasonOptionEle);
					CommonLib.smallDelay();

					// Click on the Confirm Button on the NTU Pop Up
					String[] NTUBtnlocatorDetails = CommonLib.getLocatorDetails_From_ObjectRepository(driver, strConfig,
							"BTN_NTU_Confirm");
					CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_NTU_Confirm");

					Project.ExecuteRow(driver, strConfig, "BTN_NTU_Confirm", "Click");
					CommonLib.waitForLoad(driver, strConfig);
					
					//Verify Success Message is shown after Risk is NTU'd
					CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.SuccessMsg_XPATH);
					
					String strNTUSuccessMsg = driver.findElement(By.xpath(Constants.SuccessMsg_XPATH)).getText();
					
					if(strNTUSuccessMsg.trim().contentEquals(Constants.NTUSuccessMsg)) {
						CommonLib.getLogger(strConfig).info(
								"PASS: NTU Risk Success message shown");
						TestReporter.Pass(driver, strConfig, "NTU Risk",
								"NTU Risk Success message shown");
					}
					
					else {
						CommonLib.getLogger(strConfig).info(
								"FAIL: NTU Risk Success message not shown");
						TestReporter.Fail(driver, strConfig, "NTU Risk",
								"NTU Risk Success message not shown");
					}

					CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Reinstate");
				} else {
					CommonLib.getLogger(strConfig).info(
							"FAIL: Risk Tracker Ref is different as compared to that supplied in RTTestdata.xlsx file");
					TestReporter.Fail(driver, strConfig, "Risk Tracker Ref",
							"On Screen Risk Tracker Ref is different as compared to that supplied in RTTestdata.xlsx file");
				}

			} else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: NTU button disabled. Hence cannot proceed with NTUing a Risk");
				TestReporter.Fail(driver, strConfig, "NTU button", "Is disabled and cannot proceed with NTUing a Risk");

			}
			

		}
		
		
		public static void verifyRisk_AfterNTU(RemoteWebDriver driver, String strConfig, ArrayList<String> NTUData) {
			
			CommonLib.getLogger(strConfig).info("Inside verifyRisk_AfterNTU");
			CommonLib.waitForLoad(driver, strConfig);
			
			// RISK OVERVIEW TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskOverview");

			// Click on the Risk Details Menu Item
			WebElement menuItemRiskOverviewEle = repository.GetObject(driver, strConfig, "LN_MenuItem_RiskOverview");
			common.JSClick(driver, strConfig, menuItemRiskOverviewEle);
			CommonLib.waitForLoad(driver, strConfig);

			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_Department");

			String riskTrackerRefNum = RTData.getRiskTracker_RefNo(driver, strConfig, Constants.riskTrackerRefNo_XPATH);
			
			
			//Verify RE-INSTATE, DMS DOCUMENTS and NOTES(0) button are visible and enabled(or clickable)
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Reinstate");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Dms_Documents");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Notes");
			
			
			// --------Verify Stage Checked  - CREATED  and NTU
			// --------Verify Stage Disabled  - NBI, QUOTE, FIRM ORDER, SUBMIT TO BROKER OPS
			
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_Created_StageIcon_Checked_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_NBI_StageIcon_Disabled_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_Quote_StageIcon_Disabled_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_FirmOrder_StageIcon_Disabled_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_SubmittedTo_BrokerOps_StageIcon_Disabled_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_NTU_StageIcon_Checked_XPATH);

			/*
			// ---------------Verify Date Populated against Created Date Field------------
			WebElement riskCreatedDateEle = driver
					.findElement(By.xpath(Constants.riskOverview_Created_Stage_CurrentDate_Populated_XPATH));
			String riskCreatedDate = riskCreatedDateEle.getText();

			//Functions to be created to verify Date Format
			//---
			//----
			if (riskCreatedDate.trim().contentEquals(RTData.getCurrentStageDate())) {
				CommonLib.getLogger(strConfig)
						.info("PASS: Created Date visible after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Created Date: ",
						"Visible after Risk NTU");
			}

			else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: Created Date not visible after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Created Date: ",
						"Not visible after Risk NTU");

			}
			*/
			
			
			// ---------------Verify Current Date Populated against NTU Date Field------------
			WebElement NTUDateEle = driver
					.findElement(By.xpath(Constants.riskOverview_NTU_Stage_CurrentDate_Populated_XPATH));
			String riskNTUDate = NTUDateEle.getText();

			if (riskNTUDate.trim().contentEquals(RTData.getCurrentStageDate())) {
				CommonLib.getLogger(strConfig)
						.info("PASS: NTU Date(as Current Date) visible after Risk NTU ");
				TestReporter.Pass(driver, strConfig, "NTU Date(as Current Date): ",
						"Visible after Risk NTU ");
			}

			else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: NTU Date(as Current Date)  not visible after Risk NTU");
				TestReporter.Fail(driver, strConfig, "NTU Date(as Current Date): ",
						"Not visible after Risk NTU");

			}
			
			
			//--- Verify Risk Overview Fields Disabled (except Cancel Button)
			WebElement UMRTxtEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_UMR");
			if (UMRTxtEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: UMR Text Input Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "UMR Text Input Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: UMR Text Input Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "UMR Text Input Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement NewOrRenewalClassificationEle = repository.GetObject(driver, strConfig, "CBO_RiskOverview_NewOrRenewal_Classification_Disabled");
			if (!NewOrRenewalClassificationEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: New Or Renewal Classification Dropdown Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "New Or Renewal Classification Dropdown Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: New Or Renewal Classification Dropdown Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "New Or Renewal Classification Dropdown Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement DepartmentEle = repository.GetObject(driver, strConfig, "CBO_RiskOverview_Department_Disabled");
			if (!DepartmentEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Department Dropdown Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Department Dropdown Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Department Dropdown Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Department Dropdown Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement AgentOrClientEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_AgentOrClient");
			if (AgentOrClientEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Agent/Client TextInput Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Agent/Client TextInput Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Agent/Client TextInput Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Agent/Client TextInput Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement DirectInsuredONOFFSwitchEle = repository.GetObject(driver, strConfig, "CHK_RiskOverview_DirectInsured_Placement_ONOFF_Switch");
			if (DirectInsuredONOFFSwitchEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Direct Insured ON-OFF Switch Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Direct Insured ON-OFF Switch Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Direct Insured ON-OFF Switch Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Direct Insured ON-OFF Switch Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement ReinsuranceONOFFSwitchEle = repository.GetObject(driver, strConfig, "CHK_RiskOverview_Reinsurance_ONOFF_Switch");
			if (ReinsuranceONOFFSwitchEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Reinsurance ON-OFF Switch Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Reinsurance ON-OFF Switch Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Reinsurance ON-OFF Switch Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Reinsurance ON-OFF Switch Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			WebElement InsuredEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_Insured_Or_DirectInsured_Or_OriginalInsured");
			if (InsuredEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Insured Text Input Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Insured Text Input Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Insured Text Input Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Insured Text Input Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			//Need to ask Rupali about the Logic for visibility of Assured Field
			WebElement AssuredEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_Assured");
			if (AssuredEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Assured Text Input Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Assured Text Input Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Assured Text Input Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Assured Text Input Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			WebElement AccountExecEle = repository.GetObject(driver, strConfig, "CBO_RiskOverview_AccountExecutive_Disabled");
			if (!AccountExecEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Account Executive Dropdown Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Account Executive Dropdown Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Account Executive Dropdown Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Account Executive Dropdown Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			WebElement InternalBrokerEle = repository.GetObject(driver, strConfig, "CBO_RiskOverview_InternalBroker_Disabled");
			if (!InternalBrokerEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Internal Broker Dropdown Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Internal Broker Dropdown Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Internal Broker Dropdown Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Internal Broker Dropdown Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			
			WebElement SaveBtnEle = repository.GetObject(driver, strConfig, "BTN_Save_Disabled");
			if (!SaveBtnEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Save button is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Save button",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Save button is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Save button",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			WebElement CancelBtnEle = repository.GetObject(driver, strConfig, "BTN_Cancel");
			if (!CancelBtnEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Cancel button is disabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Cancel button",
						"Disabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Cancel button is enabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Cancel button",
						"Enabled on Risk Overview tab after Risk NTU");
			}
			
			// --- Verify Risk Details Fields Disabled (except Cancel Button)
			// RISK DETAILS TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskDetails");

			// Click on the Risk Details Menu Item
			WebElement menuItemRiskDetailsEle = repository.GetObject(driver, strConfig, "LN_MenuItem_RiskDetails");
			common.JSClick(driver, strConfig, menuItemRiskDetailsEle);
			// Project.ExecuteRow(driver, strConfig, "LN_MenuItem_RiskDetails", "Click");
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, "DDO_RiskDetails_PremiumCurrency_Code");
			
			WebElement PolicyTypeEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_PolicyType");
			if (PolicyTypeEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Policy Type text Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Policy Type text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Policy Type text Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Policy Type text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement PremiumCurrencyEle = repository.GetObject(driver, strConfig, "CBO_RiskDetails_PremiumCurrency_Code_Disabled");
			if (!PremiumCurrencyEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Premium Currency Dropdown Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Premium Currency Dropdown Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS:Premium Currency Dropdown Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Premium Currency Dropdown Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement LimitEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Limit");
			if (LimitEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Limit Text Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Limit Text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Limit Text Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Limit Text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			
			WebElement PremiumEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Premium");
			if (PremiumEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Premium Text Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Premium Text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Premium Text Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Premium Text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement DeductibleEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Deductible");
			if (DeductibleEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Deductible Text Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Deductible Text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Deductible Text Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Deductible Text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement ClientCommissionEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_ClientCommission");
			if (ClientCommissionEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Client Commission Text Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Client Commission Text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Client Commission Text Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Client Commission Text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement InformationEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Information");
			if (InformationEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Information Text Area Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Information Text Area Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Information Text Area Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Information Text Area Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement TermsEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Terms");
			if (TermsEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Terms Text Area Input Field is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Terms Text Area Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Terms Text Area Input Field is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Terms Text Area Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			
			WebElement RiskDetailsSaveBtnEle = repository.GetObject(driver, strConfig, "BTN_Save_Disabled");
			if (!RiskDetailsSaveBtnEle.isDisplayed()) {
				CommonLib.getLogger(strConfig).info("FAIL: Save button is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Save button",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Save button is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Save button",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement RiskDetailsCancelBtnEle = repository.GetObject(driver, strConfig, "BTN_Cancel");
			if (!RiskDetailsCancelBtnEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Cancel button is disabled after Risk NTU on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Cancel button",
						"Disabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Cancel button is enabled after Risk NTU on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Cancel button",
						"Enabled on Risk Details tab after Risk NTU");
			}

		}

		public static void reinstateRisk(RemoteWebDriver driver, String strConfig, ArrayList<String> ReinstateData) {

			CommonLib.waitForLoad(driver, strConfig);

			String riskTrackerRefNum = RTData.getRiskTracker_RefNo(driver, strConfig, Constants.riskTrackerRefNo_XPATH);

			WebElement ReinstateBtnEle = repository.GetObject(driver, strConfig, "BTN_Actions_Reinstate");

			
				if (ReinstateBtnEle.isEnabled()) {
					CommonLib.getLogger(strConfig)
							.info("INFO: Reinstate button is visible and enabled. Proceeding with unNTU or Reinstating the Risk");

					if (ReinstateData.get(0).trim().contentEquals(riskTrackerRefNum)) {
						// Wait for Reinstate Button is visible and clickable
						CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Reinstate");

						Project.ExecuteRow(driver, strConfig, "BTN_Actions_Reinstate", "Click");

						// Verify Success Message is shown after Risk is Reinstated
						CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.SuccessMsg_XPATH);

						String strReinstateSuccessMsg = driver.findElement(By.xpath(Constants.SuccessMsg_XPATH)).getText();

						if (strReinstateSuccessMsg.trim().contentEquals(Constants.ReinstateSuccessMsg)) {
							CommonLib.getLogger(strConfig).info("PASS: Reinstate Risk Success message shown");
							TestReporter.Pass(driver, strConfig, "Reinstate Risk",
									"Reinstate Risk Success message shown");
						}

						else {
							CommonLib.getLogger(strConfig).info("FAIL: Reinstate Risk Success message not shown");
							TestReporter.Fail(driver, strConfig, "Reinstate Risk",
									"Reinstate Risk Success message not shown");
						}

						CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_NTU");
					} else {
						CommonLib.getLogger(strConfig).info(
								"FAIL: Risk Tracker Ref is different as compared to that supplied in RTTestdata.xlsx file");
						TestReporter.Fail(driver, strConfig, "Risk Tracker Ref",
								"On Screen Risk Tracker Ref is different as compared to that supplied in RTTestdata.xlsx file");
					}

				} else {
					CommonLib.getLogger(strConfig)
							.info("FAIL: Reinstate button disabled. Hence cannot proceed with Reinstating a Risk");
					TestReporter.Fail(driver, strConfig, "Reinstate button",
							"Is disabled and cannot proceed with Reinstating a Risk");

				}
			 

		}
		
		
		public static void verifyRisk_AfterReinstate(RemoteWebDriver driver, String strConfig, ArrayList<String> NTUData) {

			
			CommonLib.getLogger(strConfig).info("Inside verifyRisk_AfterReinstate");
			CommonLib.waitForLoad(driver, strConfig);
			
			// RISK OVERVIEW TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskOverview");
			
			// Click on the Risk Details Menu Item
			WebElement menuItemRiskOverviewEle = repository.GetObject(driver, strConfig, "LN_MenuItem_RiskOverview");
			common.JSClick(driver, strConfig, menuItemRiskOverviewEle);
			CommonLib.waitForLoad(driver, strConfig);
			
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_Department");

			String riskTrackerRefNum = RTData.getRiskTracker_RefNo(driver, strConfig, Constants.riskTrackerRefNo_XPATH);
			
			
			//Verify NTU, DMS DOCUMENTS and NOTES(0) button are visible and enabled(or clickable)
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_NTU");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Dms_Documents");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Notes");
			CommonLib.WaitForElementToBeVisible(driver, strConfig, "BTN_Actions_FirmOrder");
			CommonLib.WaitForElementToBeVisible(driver, strConfig, "BTN_Actions_SubmitTo_BrokerOps");
			
			
			// --------Verify Stage Checked  - CREATED
			// --------Verify Stage Unchecked  - NBI, QUOTE, FIRM ORDER, SUBMIT TO BROKER OPS
			
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_Created_StageIcon_Checked_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_NBI_StageIcon_UnChecked_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_Quote_StageIcon_UnChecked_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_FirmOrder_StageIcon_UnChecked_XPATH);
			CommonLib.WaitForElementToBeVisible(driver, strConfig, Constants.riskOverview_SubmittedTo_BrokerOps_StageIcon_UnChecked_XPATH);

			/*
			// ---------------Verify Date Populated against Created Date Field------------
			WebElement riskCreatedDateEle = driver
					.findElement(By.xpath(Constants.riskOverview_Created_Stage_CurrentDate_Populated_XPATH));
			String riskCreatedDate = riskCreatedDateEle.getText();

			//Functions to be created to verify Date Format
			//---
			//----
			if (riskCreatedDate.trim().contentEquals(RTData.getCurrentStageDate())) {
				CommonLib.getLogger(strConfig)
						.info("PASS: Created Date visible after Risk NTU");
				TestReporter.Pass(driver, strConfig, "Created Date: ",
						"Visible after Risk NTU");
			}

			else {
				CommonLib.getLogger(strConfig)
						.info("FAIL: Created Date not visible after Risk NTU");
				TestReporter.Fail(driver, strConfig, "Created Date: ",
						"Not visible after Risk NTU");

			}
			*/
			
			//--- Verify Risk Overview Fields Enabled (except UMR and Agent/Client)
			WebElement UMRTxtEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_UMR");
			if (UMRTxtEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: UMR Text Input Field is enabled after Risk NTU");
				TestReporter.Fail(driver, strConfig, "UMR Text Input Field",
						"Enabled on Risk Overview tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: UMR Text Input Field is disabled after Risk NTU");
				TestReporter.Pass(driver, strConfig, "UMR Text Input Field",
						"Disabled on Risk Overview tab after Risk NTU");
			}
			
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "CBO_RiskOverview_NewOrRenewal_Classification");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_Department");
		
			WebElement AgentOrClientEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_AgentOrClient");
			if (!AgentOrClientEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Agent/Client TextInput Field is enabled after Reinstating the Risk ");
				TestReporter.Pass(driver, strConfig, "Agent/Client TextInput Field",
						"Enabled on Risk Overview tab after Reinstating the Risk");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Agent/Client TextInput Field is disabled after Reinstating the Risk");
				TestReporter.Fail(driver, strConfig, "Agent/Client TextInput Field",
						"Disabled on Risk Overview tab after Reinstating the Risk");
			}
			
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "CHK_RiskOverview_DirectInsured_Placement_ONOFF_Switch");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "CHK_RiskOverview_Reinsurance_ONOFF_Switch");
			
			WebElement InsuredEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_Insured_Or_DirectInsured_Or_OriginalInsured");
			if (InsuredEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Insured Text Input Field is enabled after Risk Reinstate");
				TestReporter.Pass(driver, strConfig, "Insured Text Input Field",
						"Enabled on Risk Overview tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Insured Text Input Field is disabled after Risk Reinstate");
				TestReporter.Fail(driver, strConfig, "Insured Text Input Field",
						"Disabled on Risk Overview tab after Risk Reinstate");
			}
			
			//Need to ask Rupali about the Logic for visibility of Assured Field
			WebElement AssuredEle = repository.GetObject(driver, strConfig, "TXT_RiskOverview_Assured");
			if (AssuredEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Assured Text Input Field is enabled after Risk Reinstate");
				TestReporter.Pass(driver, strConfig, "Assured Text Input Field",
						"Enabled on Risk Overview tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Assured Text Input Field is disabled after Risk Reinstate");
				TestReporter.Fail(driver, strConfig, "Assured Text Input Field",
						"Disabled on Risk Overview tab after Risk Reinstate");
			}
			
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_AccountExecutive");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskOverview_InternalBroker");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Save");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Cancel");
			
			
			// --- Verify Risk Details Fields Enabled
			// RISK DETAILS TAB
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_MenuItem_RiskDetails");

			// Click on the Risk Details Menu Item
			WebElement menuItemRiskDetailsEle = repository.GetObject(driver, strConfig, "LN_MenuItem_RiskDetails");
			common.JSClick(driver, strConfig, menuItemRiskDetailsEle);
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "DDO_RiskDetails_PremiumCurrency_Code");
			
			WebElement PolicyTypeEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_PolicyType");
			if (!PolicyTypeEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("FAIL: Policy Type text Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Policy Type text Input Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("PASS: Policy Type text Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Policy Type text Input Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			
			WebElement LimitEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Limit");
			if (LimitEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Limit Text Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Limit Text Input Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Limit Text Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Limit Text Input Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			
			WebElement PremiumEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Premium");
			if (PremiumEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Premium Text Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Premium Text Input Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Premium Text Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Premium Text Input Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			WebElement DeductibleEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Deductible");
			if (DeductibleEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Deductible Text Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Deductible Text Input Field",
						"Enabled on Risk Details tab after Risk NTU");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Deductible Text Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Deductible Text Input Field",
						"Disabled on Risk Details tab after Risk NTU");
			}
			
			WebElement ClientCommissionEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_ClientCommission");
			if (ClientCommissionEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Client Commission Text Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Client Commission Text Input Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Client Commission Text Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Client Commission Text Input Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			WebElement InformationEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Information");
			if (InformationEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Information Text Area Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Information Text Area Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Information Text Area Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Information Text Area Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			WebElement TermsEle = repository.GetObject(driver, strConfig, "TXT_RiskDetails_Terms");
			if (TermsEle.isEnabled()) {
				CommonLib.getLogger(strConfig).info("PASS: Terms Text Area Input Field is enabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Pass(driver, strConfig, "Terms Text Area Input Field",
						"Enabled on Risk Details tab after Risk Reinstate");
			} else {
				CommonLib.getLogger(strConfig).info("FAIL: Terms Text Area Input Field is disabled after Risk Reinstate on Risk Details Tab");
				TestReporter.Fail(driver, strConfig, "Terms Text Area Input Field",
						"Disabled on Risk Details tab after Risk Reinstate");
			}
			
			
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Save");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Cancel");

		
		}
		
		public static void loginDMS(RemoteWebDriver driver, String strConfig, String strUsername, String strPassword) {
			CommonLib.waitForLoad(driver, strConfig);
			CommonLib.smallDelay();
			CommonLib.getLogger(strConfig).info(" Inside verifyDMSLocation");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_Logout_IntegroAccount");
			CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Actions_Dms_Documents");
			String pwd = CommonLib.DecryptPassword(strPassword);
			//Click DMS Button
			/*
			 * WebElement DMSBtnEle = repository.GetObject(driver, strConfig,
			 * "BTN_Actions_Dms_Documents"); common.JSClick(driver, strConfig, DMSBtnEle);
			 */
			
			Project.ExecuteRow(driver, strConfig, "BTN_Actions_Dms_Documents", "Click");
			CommonLib.smallDelay();
			CommonLib.waitForLoad(driver, strConfig);
			
			Alert alert = driver.switchTo().alert();
			
			try {
			Screen s = new Screen();
			org.sikuli.script.Pattern usernameTxtInput = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/DMS_Username.PNG");
			
			
			org.sikuli.script.Pattern passwordTxtInput = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/DMS_Password.PNG");
			org.sikuli.script.Pattern signInBtn = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/DMS_SignIn.PNG");
			
			s.wait(usernameTxtInput, 2);
			s.type(strUsername);
			s.type(Key.TAB);

			s.wait(passwordTxtInput, 2);
			s.type(pwd);
				
			s.click(signInBtn);
			

			/*Robot robot;
			try {
				robot = new Robot();
				
				//Enter Username
				StringSelection username = new StringSelection(strUsername.trim());
				Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
				clipboard.setContents(username, username);

				robot.keyPress(KeyEvent.VK_CONTROL);
				robot.keyPress(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_CONTROL);
				
				CommonLib.smallDelay();
				
				robot.keyPress(KeyEvent.VK_TAB);
				robot.keyRelease(KeyEvent.VK_TAB);
				
				CommonLib.Delay();
				
				//Enter Password
				StringSelection password = new StringSelection(pwd.trim());
				clipboard.setContents(password, password);

				robot.keyPress(KeyEvent.VK_CONTROL);
				robot.keyPress(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_V);
				robot.keyRelease(KeyEvent.VK_CONTROL);
		
				CommonLib.Delay();
				
				robot.keyPress(KeyEvent.VK_TAB);
				robot.keyRelease(KeyEvent.VK_TAB);
				
				CommonLib.Delay();
				
				robot.keyPress(KeyEvent.VK_ENTER);
				robot.keyRelease(KeyEvent.VK_ENTER);
				
				CommonLib.mediumDelay(); */
	        	CommonLib.smallDelay();
				CommonLib.waitForLoad(driver, strConfig);
				
				/*
				 * String pageTitle = driver.getTitle();
				 * 
				 * if(pageTitle.contentEquals(Constants.DMSLoginPageTitle)) {
				 * 
				 * CommonLib.getLogger(strConfig).
				 * info("PASS: Passed the 1st Level of DMS Authentication");
				 * TestReporter.Pass(driver, strConfig, "Login DMS : ",
				 * "Passed the 1st Level of DMS Authentication"); }
				 */
				/*WebElement username = repository.GetObject(driver, strConfig, "TXT_DMS_Username");
				WebElement password = repository.GetObject(driver, strConfig, "TXT_DMS_Username");
				WebElement SignIn = repository.GetObject(driver, strConfig, "TXT_DMS_Username");
				
				username.sendKeys(strUsername);
				username.sendKeys(pwd);
				common.JSClick(driver, strConfig, SignIn);*/
				
				//Project.ExecuteRow(driver, strConfig, "TXT_DMS_Username", strUsername);
				//Project.ExecuteRow(driver, strConfig, "TXT_DMS_Password", strPassword);
				//Project.ExecuteRow(driver, strConfig, "BTN_DMS_SignIn", "Click");
				
				Screen s1 = new Screen();
				org.sikuli.script.Pattern OTSUsernameTxtInput = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/OTS_Username.PNG");
				org.sikuli.script.Pattern OTSPasswordTxtInput = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/OTS_Password.PNG");
				org.sikuli.script.Pattern OTSSignInBtn = new org.sikuli.script.Pattern(ProjectConstants.SIKULI_IMAGE_LOCATION + "/OTS_SignIn.PNG");
				
				s1.wait(OTSUsernameTxtInput, 2);
				s1.type(strUsername);
				s1.type(Key.TAB);

				s1.wait(OTSPasswordTxtInput, 2);
				s1.type(pwd);
					
				s.click(OTSSignInBtn);
				CommonLib.smallDelay();
				
			} catch (FindFailed e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				
				CommonLib.waitForLoad(driver, strConfig);
				CommonLib.WaitForElementToBeVisible(driver, strConfig, "TXT_DMS_Search");
				
				CommonLib.getLogger(strConfig).info("PASS: Passed the 2nd Level of DMS Authentication");
				TestReporter.Pass(driver, strConfig, "Login DMS : ",
						"Passed the 2nd Level of DMS Authentication");
				
				
				/*
				 * } catch (AWTException e) { // TODO Auto-generated catch block
				 * e.printStackTrace(); }
				 */
			
			
		}
		
		public static void verifyDMSLocation(RemoteWebDriver driver, String strConfig, String strUsername, String strPassword) {
			
			
		}
		
		
		public static void logoutRiskTracker(RemoteWebDriver driver, String strConfig) {
		CommonLib.WaitForElementToBeVisible(driver, strConfig, "LN_Logout_IntegroAccount");	
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "LN_Logout_IntegroAccount");
		CommonLib.getLogger(strConfig).info("INFO: Logging Out of Risk Tracker");
		TestReporter.Info(driver, strConfig, "LogOut Operation : ",
				" Logging Out of Risk Tracker");
		WebElement logOutEle =  repository.GetObject(driver, strConfig, "LN_Logout_IntegroAccount");
		common.JSClick(driver, strConfig, logOutEle);
		CommonLib.WaitForElementToBeClickable(driver, strConfig, "BTN_Login_IntegroAccount");
		
		CommonLib.getLogger(strConfig).info("INFO: Logging Out of Risk Tracker");
		TestReporter.Pass(driver, strConfig, "LogOut RiskTracker ",
				"Succesfully logged Out of Risk Tracker");

	}
	



}
	
	
	
	
